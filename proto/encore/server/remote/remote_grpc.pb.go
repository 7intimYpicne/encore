// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package remote

import (
	context "context"
	v1 "encr.dev/proto/encore/parser/meta/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RemoteClient is the client API for Remote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteClient interface {
	Tunnel(ctx context.Context, opts ...grpc.CallOption) (Remote_TunnelClient, error)
	Meta(ctx context.Context, in *MetaRequest, opts ...grpc.CallOption) (*v1.Data, error)
	DBConnect(ctx context.Context, opts ...grpc.CallOption) (Remote_DBConnectClient, error)
	RecordTrace(ctx context.Context, in *RecordTraceRequest, opts ...grpc.CallOption) (*RecordTraceResponse, error)
	GetSecrets(ctx context.Context, in *GetSecretsRequest, opts ...grpc.CallOption) (*GetSecretsResponse, error)
	SetSecret(ctx context.Context, in *SetSecretRequest, opts ...grpc.CallOption) (*SetSecretResponse, error)
	Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (Remote_LogsClient, error)
}

type remoteClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteClient(cc grpc.ClientConnInterface) RemoteClient {
	return &remoteClient{cc}
}

func (c *remoteClient) Tunnel(ctx context.Context, opts ...grpc.CallOption) (Remote_TunnelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Remote_serviceDesc.Streams[0], "/encore.server.remote.Remote/Tunnel", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteTunnelClient{stream}
	return x, nil
}

type Remote_TunnelClient interface {
	Send(*TunnelClientMsg) error
	Recv() (*TunnelServerMsg, error)
	grpc.ClientStream
}

type remoteTunnelClient struct {
	grpc.ClientStream
}

func (x *remoteTunnelClient) Send(m *TunnelClientMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoteTunnelClient) Recv() (*TunnelServerMsg, error) {
	m := new(TunnelServerMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *remoteClient) Meta(ctx context.Context, in *MetaRequest, opts ...grpc.CallOption) (*v1.Data, error) {
	out := new(v1.Data)
	err := c.cc.Invoke(ctx, "/encore.server.remote.Remote/Meta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClient) DBConnect(ctx context.Context, opts ...grpc.CallOption) (Remote_DBConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Remote_serviceDesc.Streams[1], "/encore.server.remote.Remote/DBConnect", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteDBConnectClient{stream}
	return x, nil
}

type Remote_DBConnectClient interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ClientStream
}

type remoteDBConnectClient struct {
	grpc.ClientStream
}

func (x *remoteDBConnectClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoteDBConnectClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *remoteClient) RecordTrace(ctx context.Context, in *RecordTraceRequest, opts ...grpc.CallOption) (*RecordTraceResponse, error) {
	out := new(RecordTraceResponse)
	err := c.cc.Invoke(ctx, "/encore.server.remote.Remote/RecordTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClient) GetSecrets(ctx context.Context, in *GetSecretsRequest, opts ...grpc.CallOption) (*GetSecretsResponse, error) {
	out := new(GetSecretsResponse)
	err := c.cc.Invoke(ctx, "/encore.server.remote.Remote/GetSecrets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClient) SetSecret(ctx context.Context, in *SetSecretRequest, opts ...grpc.CallOption) (*SetSecretResponse, error) {
	out := new(SetSecretResponse)
	err := c.cc.Invoke(ctx, "/encore.server.remote.Remote/SetSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteClient) Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (Remote_LogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Remote_serviceDesc.Streams[2], "/encore.server.remote.Remote/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Remote_LogsClient interface {
	Recv() (*LogsResponse, error)
	grpc.ClientStream
}

type remoteLogsClient struct {
	grpc.ClientStream
}

func (x *remoteLogsClient) Recv() (*LogsResponse, error) {
	m := new(LogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RemoteServer is the server API for Remote service.
// All implementations must embed UnimplementedRemoteServer
// for forward compatibility
type RemoteServer interface {
	Tunnel(Remote_TunnelServer) error
	Meta(context.Context, *MetaRequest) (*v1.Data, error)
	DBConnect(Remote_DBConnectServer) error
	RecordTrace(context.Context, *RecordTraceRequest) (*RecordTraceResponse, error)
	GetSecrets(context.Context, *GetSecretsRequest) (*GetSecretsResponse, error)
	SetSecret(context.Context, *SetSecretRequest) (*SetSecretResponse, error)
	Logs(*LogsRequest, Remote_LogsServer) error
	mustEmbedUnimplementedRemoteServer()
}

// UnimplementedRemoteServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteServer struct {
}

func (*UnimplementedRemoteServer) Tunnel(Remote_TunnelServer) error {
	return status.Errorf(codes.Unimplemented, "method Tunnel not implemented")
}
func (*UnimplementedRemoteServer) Meta(context.Context, *MetaRequest) (*v1.Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Meta not implemented")
}
func (*UnimplementedRemoteServer) DBConnect(Remote_DBConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method DBConnect not implemented")
}
func (*UnimplementedRemoteServer) RecordTrace(context.Context, *RecordTraceRequest) (*RecordTraceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordTrace not implemented")
}
func (*UnimplementedRemoteServer) GetSecrets(context.Context, *GetSecretsRequest) (*GetSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecrets not implemented")
}
func (*UnimplementedRemoteServer) SetSecret(context.Context, *SetSecretRequest) (*SetSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSecret not implemented")
}
func (*UnimplementedRemoteServer) Logs(*LogsRequest, Remote_LogsServer) error {
	return status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (*UnimplementedRemoteServer) mustEmbedUnimplementedRemoteServer() {}

func RegisterRemoteServer(s *grpc.Server, srv RemoteServer) {
	s.RegisterService(&_Remote_serviceDesc, srv)
}

func _Remote_Tunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteServer).Tunnel(&remoteTunnelServer{stream})
}

type Remote_TunnelServer interface {
	Send(*TunnelServerMsg) error
	Recv() (*TunnelClientMsg, error)
	grpc.ServerStream
}

type remoteTunnelServer struct {
	grpc.ServerStream
}

func (x *remoteTunnelServer) Send(m *TunnelServerMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoteTunnelServer) Recv() (*TunnelClientMsg, error) {
	m := new(TunnelClientMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Remote_Meta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServer).Meta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/encore.server.remote.Remote/Meta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServer).Meta(ctx, req.(*MetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Remote_DBConnect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteServer).DBConnect(&remoteDBConnectServer{stream})
}

type Remote_DBConnectServer interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type remoteDBConnectServer struct {
	grpc.ServerStream
}

func (x *remoteDBConnectServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoteDBConnectServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Remote_RecordTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServer).RecordTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/encore.server.remote.Remote/RecordTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServer).RecordTrace(ctx, req.(*RecordTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Remote_GetSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServer).GetSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/encore.server.remote.Remote/GetSecrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServer).GetSecrets(ctx, req.(*GetSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Remote_SetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServer).SetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/encore.server.remote.Remote/SetSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServer).SetSecret(ctx, req.(*SetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Remote_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RemoteServer).Logs(m, &remoteLogsServer{stream})
}

type Remote_LogsServer interface {
	Send(*LogsResponse) error
	grpc.ServerStream
}

type remoteLogsServer struct {
	grpc.ServerStream
}

func (x *remoteLogsServer) Send(m *LogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Remote_serviceDesc = grpc.ServiceDesc{
	ServiceName: "encore.server.remote.Remote",
	HandlerType: (*RemoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Meta",
			Handler:    _Remote_Meta_Handler,
		},
		{
			MethodName: "RecordTrace",
			Handler:    _Remote_RecordTrace_Handler,
		},
		{
			MethodName: "GetSecrets",
			Handler:    _Remote_GetSecrets_Handler,
		},
		{
			MethodName: "SetSecret",
			Handler:    _Remote_SetSecret_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Tunnel",
			Handler:       _Remote_Tunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DBConnect",
			Handler:       _Remote_DBConnect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Logs",
			Handler:       _Remote_Logs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "encore/server/remote/remote.proto",
}
